{
	"info": {
		"_postman_id": "31faaa07-422c-4616-a5fa-903dead4337b",
		"name": "Common KO_PassCert API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "GetToken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*********************************************************************************",
							" *",
							" * GetToken은 BaroCert API를 호출할 때 인증 헤더에 입력할 Bearer token을",
							" * 발급하는 샘플 코드입니다.",
							" * ",
							" **********************************************************************************/",
							"",
							"// LinkID와 SecretKey는 자격증명으로 BaroCert에서 제공된 값으로 변경하시기 바랍니다.",
							"var LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"var SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"",
							"/*",
							" * 아래는 HMAC Message Digest 를 구성하는 코드입니다.",
							" */",
							"",
							"// Scopes 배열은 발급된 토큰으로 사용할 수 있는 서비스 코드 목록입니다.",
							"var Access_id = '';",
							"var Scopes = ['partner', '441','442','443','444'];",
							"var TokenRequest = stringify({access_id : Access_id, scope : Scopes});",
							"var Body = CryptoJS.SHA256(TokenRequest).toString(CryptoJS.enc.Base64);",
							"",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      '*\\n' +",
							"      '2.1\\n' +",
							"      '/BAROCERT/Token';",
							"",
							"var HMACDigest = generateSignature(digestTarget, SecretKey);",
							"var Authorization = 'LINKHUB '+LinkID + ' '+HMACDigest;",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"DateTime\", RequestDT);",
							"pm.collectionVariables.set(\"TokenRequest\", TokenRequest);",
							"pm.collectionVariables.set(\"Authorization\", Authorization);",
							"",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.clear();",
							"",
							"if(pm.response.code == 200 ) {",
							"    pm.collectionVariables.set(\"API_Session_Token\",'Bearer ' +  pm.response.json().session_token);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-lh-date",
						"type": "text",
						"value": "{{DateTime}}"
					},
					{
						"key": "x-lh-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "Connection",
						"type": "text",
						"value": "close"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{Authorization}}"
					},
					{
						"key": "x-lh-forwarded",
						"type": "text",
						"value": "*"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://auth.linkhub.co.kr/BAROCERT/Token",
				"description": "ㆍBAROCERT API 사용에 필요한 Token Request."
			},
			"response": []
		},
		{
			"name": "RequestIdentity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"/**",
							" *  패스 이용자에게 본인인증을 요청합니다.",
							" *  https://developers.barocert.com/reference/pass/java/identity/api#RequestIdentity",
							" */",
							"var TokenRequest = stringify({",
							"",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"    // 수신자 생년월일 - 8자 (yyyyMMdd)",
							"    receiverBirthday: _AES256CBC('19700101'),",
							"",
							"    // 인증요청 메시지 제목 - 최대 40자",
							"    reqTitle: '본인인증 요청 메시지 제목',",
							"    // 인증요청 메시지 - 최대 500자",
							"    reqMessage: _AES256CBC('본인인증 요청 메시지'),",
							"    // 고객센터 연락처 - 최대 12자",
							"    callCenterNum: '1600-9854',",
							"    // 인증요청 만료시간 - 최대 1,000(초)까지 입력 가능",
							"    expireIn: 1000,",
							"    // 서명 원문 - 최대 2,800자 까지 입력가능",
							"    token: _AES256CBC('본인인증 요청 원문'),",
							"",
							"    // 사용자 동의 필요 여부",
							"    userAgreementYN: true,",
							"    // 사용자 정보 포함 여부",
							"    receiverInfoYN: true,",
							"",
							"    // AppToApp 인증요청 여부",
							"    // true - AppToApp 인증방식, false - Push 인증방식",
							"    appUseYN: false,",
							"    // ApptoApp 인증방식에서 사용",
							"    // 통신사 유형('SKT', 'KT', 'LGU'), 대문자 입력(대소문자 구분)",
							"    // telcoType: 'SKT',",
							"    // ApptoApp 인증방식에서 사용",
							"    // 모바일장비 유형('ANDROID', 'IOS'), 대문자 입력(대소문자 구분)",
							"    // deviceOSType: 'ANDROID',",
							"});",
							"var Body = CryptoJS.SHA256(TokenRequest).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenRequest\", TokenRequest);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Identity/023070000014",
				"description": "패스 이용자에게 본인인증을 요청합니다.\nhttps://developers.barocert.com/reference/pass/java/identity/api#RequestIdentity\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Identity/${clientCode}"
			},
			"response": []
		},
		{
			"name": "GetIdentityStatus",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"",
							"/**",
							" *  본인인증 요청 후 반환받은 접수아이디로 본인인증 진행 상태를 확인합니다.",
							" *  상태확인 함수는 본인인증 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  본인인증 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/identity/api#GetIdentityStatus",
							" */",
							"// 본인인증 요청시 반환받은 접수아이디",
							"var receiptID = '02310100230700000140000000000002'",
							"// 이용기관코드, 파트너 사이트에서 확인",
							"const clientCode = \"023070000014\";",
							"pm.collectionVariables.set(\"receiptID\", receiptID);",
							"pm.collectionVariables.set(\"clientCode\", clientCode);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{DateTime}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					}
				],
				"url": "https://barocert.linkhub.co.kr/PASS/Identity/{{clientCode}}/{{receiptID}}",
				"description": "본인인증 요청 후 반환받은 접수아이디로 본인인증 진행 상태를 확인합니다.\n상태확인 함수는 본인인증 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n본인인증 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/identity/api#GetIdentityStatus"
			},
			"response": []
		},
		{
			"name": "VerifyIdentity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"",
							"/**",
							" *  완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.",
							" *  반환받은 전자서명값(signedData)과 [1. RequestIdentity] 함수 호출에 입력한 Token의 동일 여부를 확인하여 이용자의 본인인증 검증을 완료합니다.",
							" *  검증 함수는 본인인증 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  본인인증 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/identity/api#VerifyIdentity",
							" */",
							"var TokenVerify = stringify({",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"});",
							"var Body = CryptoJS.SHA256(TokenVerify).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"      ",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenVerify\", TokenVerify);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenVerify}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Identity/023070000014/02310100230700000140000000000002",
				"description": "완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.\n반환받은 전자서명값(signedData)과 [1. RequestIdentity] 함수 호출에 입력한 Token의 동일 여부를 확인하여 이용자의 본인인증 검증을 완료합니다.\n검증 함수는 본인인증 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n본인인증 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/identity/api#VerifyIdentity\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Identity/${clientCode}/${receiptID}"
			},
			"response": []
		},
		{
			"name": "RequestSIgn",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"/**",
							" *  패스 이용자에게 문서의 전자서명을 요청합니다.",
							" *  https://developers.barocert.com/reference/pass/java/sign/api#RequestSign",
							" */",
							"var TokenRequest = stringify({",
							"    ",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"    // 수신자 생년월일 - 8자 (yyyyMMdd)",
							"    receiverBirthday: _AES256CBC('19700101'),",
							"",
							"    // 인증요청 메시지 제목 - 최대 40자",
							"    reqTitle: '전자서명 요청 메시지 제목',",
							"    // 인증요청 메시지 - 최대 500자",
							"    reqMessage: _AES256CBC('전자서명 요청 메시지'),",
							"    // 고객센터 연락처 - 최대 12자",
							"    callCenterNum: '1600-9854',",
							"    // 인증요청 만료시간 - 최대 1,000(초)까지 입력 가능",
							"    expireIn: 1000,",
							"    // 서명 원문 - 원문 2,800자 까지 입력가능",
							"    token: _AES256CBC('전자서명 요청 원문'),",
							"    // 서명 원문 유형",
							"    // TEXT - 일반 텍스트, HASH - HASH 데이터, URL - URL 데이터, PDF - PDF 데이터",
							"    // 원본데이터(originalTypeCode, originalURL, originalFormatCode) 입력시 TEXT 사용 불가",
							"    tokenType: 'HASH',",
							"",
							"    // 사용자 동의 필요 여부",
							"    userAgreementYN: true,",
							"    // 사용자 정보 포함 여부",
							"    receiverInfoYN: true,",
							"",
							"    // 원본유형코드",
							"    // AG - 동의서, AP - 신청서, CT - 계약서, GD - 안내서, NT - 통지서, TR - 약관",
							"    originalTypeCode: 'TR', ",
							"    // 원본조회URL",
							"    originalURL: 'https://www.passcert.co.kr',",
							"    // 원본형태코드",
							"    // (TEXT, HTML, DOCUMENT_IMAGE, DOWNLOAD_DOCUMENT)",
							"    originalFormatCode: 'HTML',",
							"",
							"    // AppToApp 인증요청 여부",
							"    // true - AppToApp 인증방식, false - Push 인증방식",
							"    appUseYN: false,",
							"    // ApptoApp 인증방식에서 사용",
							"    // 통신사 유형('SKT', 'KT', 'LGU'), 대문자 입력(대소문자 구분)",
							"    // telcoType: 'SKT',",
							"    // ApptoApp 인증방식에서 사용",
							"    // 모바일장비 유형('ANDROID', 'IOS'), 대문자 입력(대소문자 구분)",
							"    // deviceOSType: 'ANDROID',",
							"  });",
							"var Body = CryptoJS.SHA256(TokenRequest).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenRequest\", TokenRequest);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-encryptionmode",
						"type": "text",
						"value": "CBC"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Sign/023070000014",
				"description": "패스 이용자에게 문서의 전자서명을 요청합니다.\nhttps://developers.barocert.com/reference/pass/java/sign/api#RequestSign\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Sign/${clientCode}"
			},
			"response": []
		},
		{
			"name": "GetSignStatus",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"",
							"/**",
							" *  전자서명 요청 후 반환받은 접수아이디로 인증 진행 상태를 확인합니다.",
							" *  상태확인 함수는 전자서명 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  전자서명 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/sign/api#GetSignStatus",
							" */",
							"// 전자서명 요청시 반환받은 접수아이디",
							"var receiptID = '02310100230700000140000000000006'",
							"// 이용기관코드, 파트너 사이트에서 확인",
							"const clientCode = \"023070000014\";",
							"pm.collectionVariables.set(\"receiptID\", receiptID);",
							"pm.collectionVariables.set(\"clientCode\", clientCode);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{DateTime}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					}
				],
				"url": "https://barocert.linkhub.co.kr/PASS/Sign/{{clientCode}}/{{receiptID}}",
				"description": "전자서명 요청 후 반환받은 접수아이디로 인증 진행 상태를 확인합니다.\n상태확인 함수는 전자서명 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n전자서명 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/sign/api#GetSignStatus"
			},
			"response": []
		},
		{
			"name": "VerifySign",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"",
							"/**",
							" *  완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.",
							" *  검증 함수는 전자서명 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  전자서명 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/sign/api#VerifySign",
							" */",
							"var TokenVerify = stringify({",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"});",
							"var Body = CryptoJS.SHA256(TokenVerify).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenVerify\", TokenVerify);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenVerify}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Sign/023070000014/02310100230700000140000000000006",
				"description": "완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.\n검증 함수는 전자서명 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n전자서명 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/sign/api#VerifySign\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Sign/${clientCode}/${receiptID}"
			},
			"response": []
		},
		{
			"name": "RequestLogin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"/**",
							" *  패스 이용자에게 간편로그인을 요청합니다.",
							" *  https://developers.barocert.com/reference/pass/java/login/api#RequestLogin",
							" */",
							"var TokenRequest = stringify({",
							"    ",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"    // 수신자 생년월일 - 8자 (yyyyMMdd)",
							"    receiverBirthday: _AES256CBC('19700101'),",
							"",
							"    // 인증요청 메시지 제목 - 최대 40자",
							"    reqTitle: '간편로그인 요청 메시지 제목',",
							"    // 인증요청 메시지 - 최대 500자",
							"    reqMessage: _AES256CBC('간편로그인 요청 메시지'),",
							"    // 고객센터 연락처 - 최대 12자",
							"    callCenterNum: '1600-9854',",
							"    // 인증요청 만료시간 - 최대 1,000(초)까지 입력 가능",
							"    expireIn: 1000,",
							"    // 서명 원문 - 최대 2,800자 까지 입력가능",
							"    token: _AES256CBC('간편로그인 요청 원문'),",
							"",
							"    // 사용자 동의 필요 여부",
							"    userAgreementYN: true,",
							"    // 사용자 정보 포함 여부",
							"    receiverInfoYN: true,",
							"",
							"    // AppToApp 인증요청 여부",
							"    // true - AppToApp 인증방식, false - Push 인증방식",
							"    appUseYN: false,",
							"    // ApptoApp 인증방식에서 사용",
							"    // 통신사 유형('SKT', 'KT', 'LGU'), 대문자 입력(대소문자 구분)",
							"    // telcoType: 'SKT',",
							"    // ApptoApp 인증방식에서 사용",
							"    // 모바일장비 유형('ANDROID', 'IOS'), 대문자 입력(대소문자 구분)",
							"    // deviceOSType: 'ANDROID',",
							"});",
							"var Body = CryptoJS.SHA256(TokenRequest).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenRequest\", TokenRequest);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-encryptionmode",
						"type": "text",
						"value": "CBC"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Login/023070000014",
				"description": "패스 이용자에게 간편로그인을 요청합니다.\nhttps://developers.barocert.com/reference/pass/java/login/api#RequestLogin\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Login/${clientCode}"
			},
			"response": []
		},
		{
			"name": "GetLoginStatus",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"",
							"/**",
							" *  간편로그인 요청 후 반환받은 접수아이디로 진행 상태를 확인합니다.",
							" *  상태확인 함수는 간편로그인 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  간편로그인 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/login/api#GetLoginStatus",
							" */",
							"// 간편로그인 요청시 반환받은 접수아이디",
							"var receiptID = '02310100230700000140000000000004'",
							"// 이용기관코드, 파트너 사이트에서 확인",
							"const clientCode = \"023070000014\";",
							"pm.collectionVariables.set(\"receiptID\", receiptID);",
							"pm.collectionVariables.set(\"clientCode\", clientCode);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{DateTime}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					}
				],
				"url": "https://barocert.linkhub.co.kr/PASS/Login/{{clientCode}}/{{receiptID}}",
				"description": "간편로그인 요청 후 반환받은 접수아이디로 진행 상태를 확인합니다.\n상태확인 함수는 간편로그인 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n간편로그인 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/login/api#GetLoginStatus"
			},
			"response": []
		},
		{
			"name": "VerifyLogin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"",
							"/**",
							" *  완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.",
							" *  검증 함수는 간편로그인 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  간편로그인 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다",
							" *  https://developers.barocert.com/reference/pass/java/login/api#VerifyLogin",
							" */",
							"var TokenVerify = stringify({",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"});",
							"var Body = CryptoJS.SHA256(TokenVerify).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenVerify\", TokenVerify);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenVerify}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/Login/023070000014/02310100230700000140000000000004",
				"description": "완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.\n검증 함수는 간편로그인 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n간편로그인 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/login/api#VerifyLogin\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/Login/${clientCode}/${receiptID}"
			},
			"response": []
		},
		{
			"name": "RequestCMS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"/**",
							" *  패스 이용자에게 자동이체 출금동의를 요청합니다.",
							" *  https://developers.barocert.com/reference/pass/java/cms/api#RequestCMS",
							" */",
							"var TokenRequest = stringify({",
							"    ",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"    // 수신자 생년월일 - 8자 (yyyyMMdd)",
							"    receiverBirthday: _AES256CBC('19700101'),",
							"",
							"    // 인증요청 메시지 제목 - 최대 40자",
							"    reqTitle: '출금동의 요청 메시지 제목',",
							"    // 인증요청 메시지 - 최대 500자",
							"    reqMessage: _AES256CBC('출금동의 요청 메시지'),",
							"    // 고객센터 연락처 - 최대 12자",
							"    callCenterNum: '1600-9854',",
							"    // 인증요청 만료시간 - 최대 1,000(초)까지 입력 가능",
							"    expireIn: 1000,",
							"    // 사용자 동의 필요 여부",
							"    userAgreementYN: true,",
							"    // 사용자 정보 포함 여부",
							"    receiverInfoYN: true,",
							"    // 출금은행명 - 최대 100자",
							"    bankName: _AES256CBC('국민은행'),",
							"    // 출금계좌번호 - 최대 32자",
							"    bankAccountNum: _AES256CBC('9-****-5117-58'),",
							"    // 출금계좌 예금주명 - 최대 100자",
							"    bankAccountName: _AES256CBC('홍길동'),",
							"    // 출금유형",
							"    // CMS - 출금동의, OPEN_BANK - 오픈뱅킹",
							"    bankServiceType: _AES256CBC('CMS'),",
							"    // 출금계좌 예금주명 - 최대 100자",
							"    bankWithdraw: _AES256CBC('1,000,000원'),",
							"",
							"    // AppToApp 인증요청 여부",
							"    // true - AppToApp 인증방식, false - Push 인증방식",
							"    appUseYN: false,",
							"    // ApptoApp 인증방식에서 사용",
							"    // 통신사 유형('SKT', 'KT', 'LGU'), 대문자 입력(대소문자 구분)",
							"    // telcoType: 'SKT',",
							"    // ApptoApp 인증방식에서 사용",
							"    // 모바일장비 유형('ANDROID', 'IOS'), 대문자 입력(대소문자 구분)",
							"    // deviceOSType: 'ANDROID',",
							"});",
							"var Body = CryptoJS.SHA256(TokenRequest).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenRequest\", TokenRequest);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/CMS/023070000014",
				"description": "패스 이용자에게 자동이체 출금동의를 요청합니다.\nhttps://developers.barocert.com/reference/pass/java/cms/api#RequestCMS\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/CMS/${clientCode}"
			},
			"response": []
		},
		{
			"name": "GetCMSStatus",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"",
							"/**",
							" *  자동이체 출금동의 요청 후 반환받은 접수아이디로 인증 진행 상태를 확인합니다.",
							" *  상태확인 함수는 자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/cms/api#GetCMSStatus",
							" */",
							"// 자동이체 출금동의 요청시 반환받은 접수아이디",
							"var receiptID = '02310100230700000140000000000007'",
							"// 이용기관코드, 파트너 사이트에서 확인",
							"const clientCode = \"023070000014\";",
							"pm.collectionVariables.set(\"receiptID\", receiptID);",
							"pm.collectionVariables.set(\"clientCode\", clientCode);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{DateTime}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					}
				],
				"url": "https://barocert.linkhub.co.kr/PASS/CMS/{{clientCode}}/{{receiptID}}",
				"description": "자동이체 출금동의 요청 후 반환받은 접수아이디로 인증 진행 상태를 확인합니다.\n상태확인 함수는 자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초 이후 상태확인 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/cms/api#GetCMSStatus"
			},
			"response": []
		},
		{
			"name": "VerifyCMS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**",
							" * API 호출전 GetToken을 실행해야 합니다.",
							" * GetToken을 실행하면 Bearer Token 인증에 사용되는 토큰이 Collection Scope 변수에 저장됩니다.",
							" */",
							"const LinkID = 'TESTER';  // ex. 'LINKHUB'",
							"const SecretKey = 'SwWxqU+0TErBXy/9TVjIPEnI0VTUMMSQZtJf3Ed8q3I='; //ex. 'CAuU7dpL4viqfoT6G+HJjqWzHhg3hRDD5sKIkp7Yqwc='",
							"const uri = pm.request.url.getPath();",
							"",
							"/**",
							" *  완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.",
							" *  검증 함수는 자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.",
							" *  자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.",
							" *  https://developers.barocert.com/reference/pass/java/cms/api#VerifyCMS",
							" */",
							"var TokenVerify = stringify({",
							"    // 수신자 휴대폰번호 - 11자 (하이픈 제외)",
							"    receiverHP: _AES256CBC('01012341234'),",
							"    // 수신자 성명 - 80자",
							"    receiverName: _AES256CBC('홍길동'),",
							"});",
							"var Body = CryptoJS.SHA256(TokenVerify).toString(CryptoJS.enc.Base64);",
							"var RequestDT = new Date().toISOString();",
							"",
							"var digestTarget =",
							"      'POST\\n' +",
							"      Body + '\\n' +",
							"      RequestDT +'\\n' +",
							"      uri + '\\n';",
							"",
							"var Authorization = generateSignature(digestTarget, SecretKey);",
							"",
							"// HMAC 인증을 위한 요청 헤더.",
							"pm.collectionVariables.set(\"x-bc-auth\", Authorization);",
							"pm.collectionVariables.set(\"x-bc-date\", RequestDT);",
							"pm.collectionVariables.set(\"TokenVerify\", TokenVerify);",
							"",
							"function stringify(obj) {",
							"  return JSON.stringify(obj,function(key,value){return !value ? undefined : value;});",
							"}",
							"",
							"function generateSignature(message, key) {",
							"    var keyDec = CryptoJS.enc.Base64.parse(key)",
							"    var enc = CryptoJS.HmacSHA256(message, keyDec).toString(CryptoJS.enc.Base64);",
							"    return enc;",
							"}",
							"",
							"function _AES256CBC(plainText) {",
							"    const iv = CryptoJS.lib.WordArray.random(16);",
							"    const encrypted = CryptoJS.AES.encrypt(plainText,CryptoJS.enc.Base64.parse(SecretKey),{iv : iv});",
							"    const concatText = iv.concat(encrypted.ciphertext)",
							"  return concatText.toString(CryptoJS.enc.Base64);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{API_Session_Token}}"
					},
					{
						"key": "x-bc-date",
						"type": "text",
						"value": "{{x-bc-date}}"
					},
					{
						"key": "x-bc-version",
						"type": "text",
						"value": "2.1"
					},
					{
						"key": "x-bc-auth",
						"type": "text",
						"value": "{{x-bc-auth}}"
					},
					{
						"key": "x-bc-encryptionmode",
						"value": "CBC",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{TokenVerify}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://barocert.linkhub.co.kr/PASS/CMS/023070000014/02310100230700000140000000000007",
				"description": "완료된 전자서명을 검증하고 전자서명값(signedData)을 반환 받습니다.\n검증 함수는 자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초까지만 호출 가능합니다.\n자동이체 출금동의 요청 함수를 호출한 당일 23시 59분 59초 이후 검증 함수를 호출할 경우 오류가 반환됩니다.\nhttps://developers.barocert.com/reference/pass/java/cms/api#VerifyCMS\n\n요청 URL: https://barocert.linkhub.co.kr/PASS/CMS/${clientCode}/${receiptID}"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "API_Session_Token",
			"value": ""
		},
		{
			"key": "x-bc-auth",
			"value": ""
		},
		{
			"key": "x-bc-date",
			"value": ""
		},
		{
			"key": "TokenRequest",
			"value": ""
		}
	]
}